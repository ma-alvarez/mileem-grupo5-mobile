/* The following code was generated by JFlex 1.4.3 on 8/13/14 3:26 PM */

// java -jar JFlex.jar CSS.flex

package com.pixate.freestyle.styling.parsing;

import java.io.Reader;
import java.io.StringReader;
import java.util.Stack;

import com.pixate.freestyle.cg.math.PXDimension;
import com.pixate.freestyle.parsing.Lexeme;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/13/14 3:26 PM from the specification file
 * <tt>CSS.flex</tt>
 */
class PXStylesheetLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\21\1\0\1\11\1\20\22\0\1\17\1\77\1\12"+
    "\1\61\1\31\1\104\1\57\1\10\1\47\1\60\1\23\1\14\1\116"+
    "\1\13\1\15\1\22\12\1\1\105\1\114\1\0\1\4\1\115\1\57"+
    "\1\62\1\32\1\54\1\72\1\33\1\40\1\71\1\44\1\51\1\37"+
    "\1\6\1\74\1\35\1\64\1\25\1\70\1\66\1\6\1\42\1\53"+
    "\1\46\1\56\1\107\1\6\1\101\1\76\1\103\1\112\1\3\1\113"+
    "\1\30\1\7\1\0\1\32\1\54\1\72\1\33\1\40\1\71\1\43"+
    "\1\50\1\36\1\5\1\73\1\34\1\63\1\24\1\67\1\65\1\5"+
    "\1\41\1\52\1\45\1\55\1\106\1\5\1\100\1\75\1\102\1\110"+
    "\1\27\1\111\1\26\1\0\200\2\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\2\1\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\2\1\3\3\1\14\2\3\1\15\3\1\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\0"+
    "\1\11\6\26\1\27\4\26\1\30\3\0\1\31\2\0"+
    "\1\11\1\2\1\32\3\0\1\33\1\34\1\35\1\36"+
    "\1\37\6\3\1\40\25\0\1\41\1\0\2\26\1\42"+
    "\1\43\1\44\2\26\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\26\3\0\1\54\6\3\31\0\1\55"+
    "\1\56\1\57\1\26\1\60\1\5\3\3\1\61\1\3"+
    "\1\62\1\3\1\63\33\0\1\64\2\3\1\65\1\66"+
    "\1\67\1\70\7\0\1\71\4\0\1\72\3\0\1\73"+
    "\10\0\2\3\2\0\1\74\6\0\1\75\1\0\1\76"+
    "\3\0\1\77\1\0\1\100\3\0\1\101\2\0\2\3"+
    "\1\0\1\102\6\0\1\103\4\0\1\104\1\105\5\0"+
    "\2\3\12\0\1\106\5\0\1\107\1\110\2\3\20\0"+
    "\2\3\1\111\1\112\1\113\1\114\14\0\2\3\3\0"+
    "\1\115\1\0\1\116\2\0\1\117\1\120\3\0\2\3"+
    "\10\0\1\121\2\3\2\0\1\122\1\123\1\0\1\124"+
    "\1\125\1\0\2\3\2\0\1\126\1\127\2\3\2\0"+
    "\1\130\1\131\1\0\1\132\1\0\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\117\0\u018b\0\u01da"+
    "\0\u0229\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\355\0\u0403"+
    "\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\117\0\u062c"+
    "\0\u067b\0\117\0\u06ca\0\u0719\0\u0768\0\u07b7\0\117\0\117"+
    "\0\117\0\117\0\117\0\117\0\117\0\u0806\0\u0855\0\u08a4"+
    "\0\u08f3\0\u0806\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd"+
    "\0\u0806\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\117\0\u013c\0\u018b"+
    "\0\u0c58\0\117\0\u0229\0\u0ca7\0\117\0\u0cf6\0\u0d45\0\u0d94"+
    "\0\u0de3\0\u0e32\0\117\0\117\0\117\0\117\0\117\0\u0e81"+
    "\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u06ca\0\u105b\0\u10aa"+
    "\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u0768\0\u1235\0\u1284\0\u12d3"+
    "\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b"+
    "\0\u159a\0\u15e9\0\u1638\0\117\0\u1687\0\u16d6\0\u1725\0\u0806"+
    "\0\u0806\0\u0806\0\u1774\0\u17c3\0\u0806\0\u0806\0\u0806\0\u0806"+
    "\0\u0806\0\u0806\0\u0806\0\u1812\0\u1861\0\u18b0\0\u18ff\0\355"+
    "\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77"+
    "\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def"+
    "\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067"+
    "\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u0806"+
    "\0\u0806\0\u0806\0\u22df\0\u0806\0\117\0\u232e\0\u237d\0\u23cc"+
    "\0\117\0\u241b\0\117\0\u246a\0\117\0\u24b9\0\u2508\0\u2557"+
    "\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf"+
    "\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47"+
    "\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf"+
    "\0\u0806\0\u2d0e\0\u2d5d\0\117\0\117\0\117\0\u24b9\0\u2dac"+
    "\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\117\0\u2fd5"+
    "\0\u3024\0\u3073\0\u30c2\0\117\0\u3111\0\u3160\0\u31af\0\117"+
    "\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427"+
    "\0\u3476\0\u34c5\0\u3514\0\u3563\0\117\0\u35b2\0\u3601\0\u3650"+
    "\0\u369f\0\u36ee\0\u373d\0\117\0\u378c\0\117\0\u37db\0\u382a"+
    "\0\u3879\0\117\0\u38c8\0\117\0\u3917\0\u3966\0\u39b5\0\117"+
    "\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\117\0\u3b8f\0\u3bde"+
    "\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\117\0\u3d69\0\u3db8\0\u3e07"+
    "\0\u3e56\0\117\0\117\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1"+
    "\0\u4030\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259"+
    "\0\u42a8\0\u42f7\0\u4346\0\u4395\0\117\0\u43e4\0\u4433\0\u4482"+
    "\0\u44d1\0\u4520\0\117\0\117\0\u456f\0\u45be\0\u460d\0\u465c"+
    "\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7\0\u4836\0\u4885\0\u48d4"+
    "\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c"+
    "\0\117\0\117\0\117\0\117\0\u4b9b\0\u4bea\0\u4c39\0\u4c88"+
    "\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00"+
    "\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\117\0\u50da\0\117"+
    "\0\u5129\0\u5178\0\117\0\117\0\u51c7\0\u5216\0\u5265\0\u52b4"+
    "\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c"+
    "\0\u557b\0\117\0\u55ca\0\u5619\0\u5668\0\u56b7\0\117\0\117"+
    "\0\u5706\0\117\0\117\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u5891"+
    "\0\117\0\117\0\u58e0\0\u592f\0\u597e\0\u59cd\0\117\0\117"+
    "\0\u5a1c\0\117\0\u5a6b\0\117";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\4\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\4\10\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\4\2\25"+
    "\3\4\2\26\4\4\1\27\2\30\3\4\2\31\1\2"+
    "\1\32\1\33\1\34\14\4\1\35\4\4\1\2\1\36"+
    "\2\4\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\120\0\1\3\1\46\1\47\1\0\2\46\4\0\1\50"+
    "\1\0\1\51\6\0\2\52\4\0\1\46\1\53\2\46"+
    "\2\54\1\55\2\56\2\57\2\46\1\0\2\60\2\61"+
    "\3\46\4\0\2\62\2\63\3\46\1\64\2\65\2\46"+
    "\1\0\4\46\1\66\1\0\2\46\10\0\2\4\1\67"+
    "\1\0\3\4\3\0\1\4\10\0\2\4\4\0\15\4"+
    "\1\0\7\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\10\0\2\4\1\0\1\4\1\0\1\4\6\0\1\4"+
    "\1\0\1\4\5\0\2\4\3\0\2\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\2\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\1\0\3\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\1\4\3\0\1\4\7\0\3\70"+
    "\1\71\4\70\1\72\1\0\6\70\2\0\75\70\11\0"+
    "\1\10\4\0\4\10\75\0\3\73\1\74\5\73\1\0"+
    "\1\72\5\73\2\0\75\73\1\0\1\3\1\4\1\67"+
    "\1\0\2\4\6\0\1\51\6\0\2\17\4\0\15\4"+
    "\1\0\7\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\10\0\1\3\13\0\1\51\6\0\2\75\72\0\1\76"+
    "\1\77\1\100\1\0\2\77\4\0\1\101\10\0\2\77"+
    "\4\0\15\77\1\0\7\77\4\0\14\77\1\0\4\77"+
    "\2\0\2\77\32\0\1\102\77\0\1\103\116\0\1\104"+
    "\116\0\1\105\116\0\1\106\116\0\1\107\113\0\2\4"+
    "\1\67\1\0\3\4\3\0\1\4\10\0\2\110\4\0"+
    "\15\4\1\0\7\4\4\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\3\4\3\0\1\4"+
    "\10\0\2\4\4\0\4\4\2\111\7\4\1\0\7\4"+
    "\4\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\3\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\112\10\4\2\113\2\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\3\4\3\0\1\4\10\0\2\4\4\0\15\4\1\0"+
    "\2\4\2\114\3\4\4\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\3\4\3\0\1\4"+
    "\10\0\2\4\4\0\7\4\2\115\4\4\1\0\7\4"+
    "\4\0\14\4\1\0\4\4\2\0\2\4\10\0\2\116"+
    "\1\117\1\0\3\116\3\0\1\116\10\0\2\116\4\0"+
    "\15\116\1\0\7\116\4\0\14\116\1\0\4\116\2\0"+
    "\2\116\33\0\2\120\10\0\2\121\23\0\2\122\4\0"+
    "\1\123\1\0\2\124\33\0\1\125\4\0\4\125\1\126"+
    "\13\0\2\127\103\0\2\130\4\0\1\131\1\0\2\132"+
    "\2\133\1\134\2\135\2\0\2\136\1\0\2\137\2\0"+
    "\1\140\12\0\2\141\1\142\1\143\12\0\1\144\2\145"+
    "\10\0\2\46\1\47\1\0\2\46\15\0\2\46\4\0"+
    "\15\46\1\0\7\46\4\0\14\46\1\0\4\46\2\0"+
    "\2\46\10\0\2\46\1\0\1\46\1\0\1\46\6\0"+
    "\1\46\1\0\1\46\5\0\2\46\3\0\2\46\1\0"+
    "\1\46\1\0\2\46\1\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\2\46\1\0\1\46\5\0"+
    "\1\46\1\0\1\46\1\0\3\46\1\0\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\1\46\3\0\1\46\11\0"+
    "\1\46\1\47\1\0\2\46\15\0\2\46\4\0\15\46"+
    "\1\0\7\46\4\0\14\46\1\0\4\46\2\0\2\46"+
    "\10\0\1\76\116\0\2\46\1\47\1\0\2\46\15\0"+
    "\2\46\4\0\6\46\1\146\6\46\1\0\7\46\4\0"+
    "\2\46\2\147\10\46\1\0\4\46\2\0\2\46\10\0"+
    "\2\46\1\47\1\0\2\46\15\0\2\150\4\0\15\46"+
    "\1\0\7\46\4\0\14\46\1\0\4\46\2\0\2\46"+
    "\10\0\2\46\1\47\1\0\2\46\15\0\2\46\4\0"+
    "\15\46\1\0\7\46\4\0\2\151\12\46\1\0\2\152"+
    "\2\46\2\0\2\46\10\0\2\46\1\47\1\0\2\46"+
    "\15\0\2\46\4\0\1\153\14\46\1\0\7\46\4\0"+
    "\14\46\1\0\4\46\2\0\2\46\10\0\2\46\1\47"+
    "\1\0\2\46\15\0\2\46\4\0\7\46\2\154\4\46"+
    "\1\0\7\46\4\0\14\46\1\0\4\46\2\0\2\46"+
    "\10\0\2\46\1\47\1\0\2\46\15\0\2\46\4\0"+
    "\15\46\1\0\7\46\4\0\14\46\1\0\2\46\2\155"+
    "\2\0\2\46\10\0\2\46\1\47\1\0\2\46\15\0"+
    "\2\46\4\0\15\46\1\0\2\46\2\156\3\46\4\0"+
    "\2\157\12\46\1\0\4\46\2\0\2\46\10\0\2\46"+
    "\1\47\1\0\2\46\15\0\2\46\4\0\13\46\2\160"+
    "\1\0\7\46\4\0\7\46\1\161\4\46\1\0\2\162"+
    "\2\46\2\0\2\46\10\0\2\46\1\47\1\0\2\46"+
    "\15\0\2\46\4\0\15\46\1\0\7\46\4\0\2\163"+
    "\12\46\1\0\4\46\2\0\2\46\10\0\2\46\1\47"+
    "\1\0\2\46\15\0\2\46\4\0\15\46\1\0\2\164"+
    "\5\46\4\0\14\46\1\0\4\46\2\0\2\46\7\0"+
    "\3\70\1\71\4\70\1\72\7\70\1\165\76\70\3\73"+
    "\1\74\6\73\1\72\5\73\1\166\76\73\1\0\1\76"+
    "\1\46\1\47\1\0\2\46\4\0\1\50\10\0\2\46"+
    "\4\0\1\46\1\53\2\46\2\54\1\55\2\56\2\57"+
    "\2\46\1\0\2\60\2\61\3\46\4\0\2\62\2\63"+
    "\3\46\1\64\2\65\2\46\1\0\4\46\1\66\1\0"+
    "\2\46\10\0\2\77\1\100\1\0\3\77\3\0\1\77"+
    "\10\0\2\77\4\0\15\77\1\0\7\77\4\0\14\77"+
    "\1\0\4\77\2\0\2\77\10\0\2\77\1\0\1\77"+
    "\1\0\1\77\6\0\1\77\1\0\1\77\5\0\2\77"+
    "\3\0\2\77\1\0\1\77\1\0\2\77\1\0\1\77"+
    "\1\0\1\77\1\0\1\77\2\0\1\77\1\0\2\77"+
    "\1\0\1\77\5\0\1\77\1\0\1\77\1\0\3\77"+
    "\1\0\1\77\1\0\1\77\2\0\1\77\1\0\1\77"+
    "\3\0\1\77\11\0\1\77\1\100\1\0\2\77\15\0"+
    "\2\77\4\0\15\77\1\0\7\77\4\0\14\77\1\0"+
    "\4\77\2\0\2\77\7\0\23\102\1\167\73\102\1\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\1\4\1\170\13\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\3\4\3\0\1\4\10\0\2\171\4\0\15\4\1\0"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\1\4\1\172\13\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\3\4\3\0\1\4\10\0\2\4\4\0\15\4\1\0"+
    "\4\4\1\173\2\4\4\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\3\4\3\0\1\4"+
    "\10\0\2\4\4\0\2\4\2\174\11\4\1\0\4\4"+
    "\1\175\2\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\10\0\2\4\1\67\1\0\3\4\3\0\1\4\10\0"+
    "\2\4\4\0\2\4\2\176\11\4\1\0\7\4\4\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\116\1\0"+
    "\1\116\1\0\1\116\6\0\1\116\1\0\1\116\5\0"+
    "\2\116\3\0\2\116\1\0\1\116\1\0\2\116\1\0"+
    "\1\116\1\0\1\116\1\0\1\116\2\0\1\116\1\0"+
    "\2\116\1\0\1\116\5\0\1\116\1\0\1\116\1\0"+
    "\3\116\1\0\1\116\1\0\1\116\2\0\1\116\1\0"+
    "\1\116\3\0\1\116\41\0\1\177\147\0\2\200\72\0"+
    "\1\201\145\0\2\202\66\0\1\203\101\0\1\204\156\0"+
    "\2\205\77\0\2\206\20\0\2\207\117\0\1\210\1\211"+
    "\56\0\1\212\3\0\2\213\103\0\2\214\115\0\2\215"+
    "\35\0\2\216\121\0\2\217\60\0\1\220\153\0\2\221"+
    "\66\0\1\222\102\0\2\223\127\0\2\224\27\0\2\225"+
    "\76\0\2\226\103\0\2\227\60\0\2\46\1\47\1\0"+
    "\2\46\15\0\2\46\4\0\11\46\2\230\2\46\1\0"+
    "\7\46\4\0\14\46\1\0\4\46\2\0\2\46\10\0"+
    "\2\46\1\47\1\0\2\46\15\0\2\46\4\0\15\46"+
    "\1\0\7\46\4\0\14\46\1\0\2\231\2\46\2\0"+
    "\2\46\10\0\2\46\1\47\1\0\2\46\15\0\2\46"+
    "\4\0\1\46\1\232\13\46\1\0\7\46\4\0\14\46"+
    "\1\0\4\46\2\0\2\46\10\0\2\46\1\47\1\0"+
    "\2\46\15\0\2\46\4\0\1\233\14\46\1\0\7\46"+
    "\4\0\14\46\1\0\4\46\2\0\2\46\10\0\2\46"+
    "\1\47\1\0\2\46\15\0\2\46\4\0\15\46\1\0"+
    "\7\46\4\0\14\46\1\0\2\46\2\234\2\0\2\46"+
    "\7\0\3\70\1\71\4\70\1\72\1\0\6\70\1\0"+
    "\76\70\3\73\1\74\5\73\1\0\1\72\5\73\1\0"+
    "\76\73\22\102\1\235\1\167\73\102\1\0\2\4\1\67"+
    "\1\0\3\4\3\0\1\4\10\0\2\4\4\0\6\4"+
    "\1\236\6\4\1\0\7\4\4\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\4\4\2\237\7\4\1\0"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\1\240\14\4\1\241\7\4\4\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\3\4"+
    "\3\0\1\4\10\0\2\4\4\0\1\242\14\4\1\243"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\1\244\14\4\1\245\7\4\4\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\3\4"+
    "\3\0\1\4\10\0\2\4\4\0\15\4\1\246\7\4"+
    "\4\0\14\4\1\0\4\4\2\0\2\4\72\0\2\247"+
    "\117\0\2\250\63\0\1\251\107\0\2\252\166\0\2\253"+
    "\20\0\23\204\1\254\73\204\65\0\2\255\100\0\2\256"+
    "\112\0\2\257\115\0\2\260\115\0\2\261\74\0\2\262"+
    "\24\0\2\263\67\0\2\264\124\0\1\265\115\0\1\266"+
    "\151\0\2\267\117\0\2\270\67\0\2\271\162\0\2\272"+
    "\100\0\1\273\61\0\2\274\122\0\2\275\146\0\1\276"+
    "\64\0\1\277\130\0\2\300\44\0\2\46\1\47\1\0"+
    "\2\46\15\0\2\46\4\0\1\46\1\301\13\46\1\0"+
    "\7\46\4\0\14\46\1\0\4\46\2\0\2\46\10\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\1\302\14\4\1\0\7\4\4\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\3\4"+
    "\3\0\1\4\10\0\2\4\4\0\1\303\14\4\1\0"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\15\4\1\304\7\4\4\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\15\4\1\305\7\4\4\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\3\4\3\0\1\4\10\0\2\4\4\0\15\4"+
    "\1\306\7\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\10\0\1\246\2\0\5\246\2\0\3\246\4\0\5\246"+
    "\2\0\27\246\1\307\27\246\2\0\3\246\1\0\1\246"+
    "\40\0\1\310\145\0\2\311\64\0\2\312\124\0\2\313"+
    "\141\0\1\314\25\0\22\204\1\125\1\254\73\204\67\0"+
    "\2\315\41\0\1\316\152\0\1\317\107\0\1\320\114\0"+
    "\2\321\122\0\2\322\117\0\2\323\143\0\2\324\62\0"+
    "\1\325\132\0\1\326\107\0\2\327\115\0\2\330\113\0"+
    "\2\331\112\0\1\332\145\0\2\333\123\0\2\334\72\0"+
    "\2\335\120\0\2\336\132\0\1\337\62\0\2\340\60\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\7\4\2\341\4\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\3\4\3\0\1\4\10\0\2\4\4\0\2\4\2\342"+
    "\11\4\1\0\7\4\4\0\14\4\1\0\4\4\2\0"+
    "\2\4\61\0\2\343\104\0\2\344\106\0\1\345\77\0"+
    "\1\346\144\0\2\347\115\0\2\350\110\0\2\351\31\0"+
    "\2\352\1\0\1\353\65\0\2\354\162\0\2\355\56\0"+
    "\1\356\62\0\1\357\150\0\2\360\104\0\2\361\156\0"+
    "\2\362\60\0\1\363\117\0\2\364\115\0\2\365\67\0"+
    "\1\366\150\0\2\367\122\0\2\370\136\0\2\371\67\0"+
    "\2\372\51\0\2\4\1\67\1\0\3\4\3\0\1\373"+
    "\10\0\2\4\4\0\15\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\3\4\3\0\1\374\10\0\2\4\4\0\15\4\1\0"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\74\0"+
    "\2\375\75\0\2\376\141\0\1\377\57\0\1\u0100\131\0"+
    "\2\u0101\102\0\1\u0102\155\0\1\u0103\75\0\2\u0104\105\0"+
    "\1\u0105\145\0\2\u0106\1\0\1\u0107\64\0\1\u0108\116\0"+
    "\1\u0109\123\0\2\u010a\110\0\1\u010b\145\0\2\u010c\1\0"+
    "\1\u010d\37\0\1\u010e\143\0\1\u010f\116\0\1\u0110\57\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\11\4\2\u0111\2\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\3\4\3\0\1\4\10\0\2\4\4\0\11\4\2\u0112"+
    "\2\4\1\0\7\4\4\0\14\4\1\0\4\4\2\0"+
    "\2\4\41\0\1\u0113\116\0\1\u0114\147\0\2\u0115\64\0"+
    "\1\u0116\136\0\2\u0117\56\0\1\u0118\141\0\2\u0119\150\0"+
    "\1\u011a\75\0\2\u011b\106\0\2\u011c\107\0\1\u011d\154\0"+
    "\1\u011e\75\0\2\u011f\101\0\2\u0120\31\0\2\u0121\1\0"+
    "\1\u0122\57\0\1\u0123\116\0\1\u0124\64\0\2\4\1\67"+
    "\1\0\3\4\3\0\1\4\10\0\2\4\4\0\7\4"+
    "\2\u0125\4\4\1\0\7\4\4\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\7\4\2\u0126\4\4\1\0"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\101\0"+
    "\1\u0127\116\0\1\u0128\64\0\1\u0129\102\0\2\u012a\136\0"+
    "\2\u012b\115\0\2\u012c\104\0\2\u012d\74\0\1\u012e\141\0"+
    "\2\u012f\142\0\2\u0130\45\0\1\u0131\141\0\2\u0132\115\0"+
    "\2\u0133\1\u0134\147\0\1\u0135\75\0\2\u0136\46\0\2\4"+
    "\1\67\1\0\3\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\u0137\14\4\1\0\7\4\4\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\1\u0138\14\4\1\0\7\4"+
    "\4\0\14\4\1\0\4\4\2\0\2\4\47\0\1\u0139"+
    "\116\0\1\u013a\130\0\2\u013b\110\0\2\u013c\63\0\1\u013d"+
    "\200\0\2\u013e\53\0\1\u013f\130\0\2\u0140\104\0\2\u0141"+
    "\117\0\2\u0142\124\0\2\u0143\104\0\2\u0144\105\0\2\u0145"+
    "\136\0\2\u0146\63\0\1\u0147\141\0\2\u0148\60\0\2\4"+
    "\1\67\1\0\3\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\4\1\u0149\13\4\1\0\7\4\4\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\3\4"+
    "\3\0\1\4\10\0\2\4\4\0\1\4\1\u014a\13\4"+
    "\1\0\7\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\76\0\2\u014b\1\0\1\u014c\111\0\2\u014d\77\0\1\u014e"+
    "\144\0\2\u014f\53\0\1\u0150\107\0\2\u0151\166\0\2\u0152"+
    "\53\0\1\u0153\123\0\1\u0154\123\0\2\u0155\115\0\2\u0156"+
    "\104\0\2\u0157\62\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\4\4\2\u0158\7\4\1\0"+
    "\7\4\4\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\3\4\3\0\1\4\10\0\2\4"+
    "\4\0\4\4\2\u0159\7\4\1\0\7\4\4\0\14\4"+
    "\1\0\4\4\2\0\2\4\100\0\1\u015a\75\0\2\u015b"+
    "\105\0\1\u015c\143\0\2\u015d\62\0\1\u015e\151\0\2\u015f"+
    "\70\0\1\u0160\153\0\2\u0161\53\0\1\u0162\64\0\2\4"+
    "\1\67\1\0\3\4\3\0\1\4\10\0\2\4\4\0"+
    "\6\4\1\u0163\6\4\1\0\7\4\4\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\3\4"+
    "\3\0\1\4\10\0\2\4\4\0\6\4\1\u0164\6\4"+
    "\1\0\7\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\22\0\1\u0165\141\0\2\u0166\126\0\1\u0167\107\0\1\u0168"+
    "\123\0\2\u0169\110\0\1\u016a\117\0\2\u016b\141\0\2\u016c"+
    "\31\0\2\4\1\67\1\0\3\4\3\0\1\4\10\0"+
    "\2\u016d\4\0\15\4\1\0\7\4\4\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\3\4"+
    "\3\0\1\4\10\0\2\u016e\4\0\15\4\1\0\7\4"+
    "\4\0\14\4\1\0\4\4\2\0\2\4\54\0\2\u016f"+
    "\104\0\2\u0170\121\0\1\u0171\116\0\1\u0172\57\0\2\4"+
    "\1\67\1\0\3\4\3\0\1\4\10\0\2\4\4\0"+
    "\13\4\2\u0173\1\0\7\4\4\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\13\4\2\u0174\1\0\7\4"+
    "\4\0\14\4\1\0\4\4\2\0\2\4\104\0\2\u0175"+
    "\53\0\1\u0176\64\0\2\4\1\67\1\0\3\4\3\0"+
    "\1\4\10\0\2\4\4\0\15\4\1\u0177\7\4\4\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\3\4\3\0\1\4\10\0\2\4\4\0\15\4"+
    "\1\u0178\7\4\4\0\14\4\1\0\4\4\2\0\2\4"+
    "\74\0\2\u0179\77\0\1\u017a\107\0\1\u017b\125\0\1\u017c"+
    "\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23226];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\20\1\1\11\2\1\1\11"+
    "\4\1\7\11\1\1\3\0\14\1\1\11\3\0\1\11"+
    "\2\0\1\11\2\1\3\0\5\11\7\1\25\0\1\11"+
    "\1\0\17\1\3\0\7\1\31\0\5\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\11\33\0\3\1\3\11"+
    "\1\1\7\0\1\11\4\0\1\11\3\0\1\11\10\0"+
    "\2\1\2\0\1\11\6\0\1\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\3\0\1\11\2\0\2\1\1\0"+
    "\1\11\6\0\1\11\4\0\2\11\5\0\2\1\12\0"+
    "\1\11\5\0\2\11\2\1\20\0\2\1\4\11\14\0"+
    "\2\1\3\0\1\11\1\0\1\11\2\0\2\11\3\0"+
    "\2\1\10\0\1\11\2\1\2\0\2\11\1\0\2\11"+
    "\1\0\2\1\2\0\2\11\2\1\2\0\2\11\1\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   /** Holds a source reference */
  private String source;
    private Stack<PXStylesheetLexeme> lexemeStack;
    
  public PXStylesheetLexer() {
    this((Reader) null);
  }

  private PXStylesheetLexeme createLexeme(PXStylesheetTokenType type) {
    return createLexeme(type, yytext());
  }
  
  private PXStylesheetLexeme createLexeme(PXStylesheetTokenType type, Object value) {
    PXStylesheetLexeme result = new PXStylesheetLexeme(type, yychar, yylength(), value);

    if (yychar > 0) {
      char c = source.charAt(yychar - 1);

      if (Character.isWhitespace(c)) {
        result.setFlag(Lexeme.FLAG_TYPE_FOLLOWS_WHITESPACE);
      }
    }

    return result;
  }

  private PXDimension createDimension(String source, String units) {
    String numberString = source.substring(0, source.length() - units.length());

    return new PXDimension(Float.parseFloat(numberString), units);
  }

  private PXStylesheetLexeme createURLLexeme() {
    String source = yytext();
    int start = 4;
    int end = source.length() - 1;

    // skip leading whitespace
    while (start < end && Character.isWhitespace(source.charAt(start))) {
      start++;
    }

    // skip trailing whitespace
    while (end >= start && Character.isWhitespace(source.charAt(end - 1))) {
      end--;
    }

    // grab possible leading quote
    char firstChar = source.charAt(start);

    // trim off quotes if we have them and if they match
    if ((firstChar == '\'' || firstChar == '"') && source.charAt(end - 1) == firstChar) {
      start++;
      end--;
    }

    return createLexeme(PXStylesheetTokenType.URL, source.substring(start, end));
  }

  public PXStylesheetLexeme nextLexeme() {
    PXStylesheetLexeme result = null;
    
    if (lexemeStack != null && !lexemeStack.isEmpty()) {
      result = lexemeStack.pop();
    }
    else {
      try {
        result = yylex();
      } 
      catch (Exception e) {
        e.printStackTrace();
      }
    }

    return result;
  }

  public void setSource(String source) {
    this.source = source;
    yyreset(new StringReader(source));
  }
  
  public String getSource() {
    return source;
  }
  
  public void pushLexeme(PXStylesheetLexeme lexeme) {
    if (lexeme != null) {
      if (lexemeStack == null) {
        lexemeStack = new Stack<PXStylesheetLexeme>();
      }
      
      lexemeStack.push(lexeme);
    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PXStylesheetLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PXStylesheetLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

  // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PXStylesheetLexeme yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 90: 
          { return createLexeme(PXStylesheetTokenType.NTH_LAST_CHILD_PSEUDO_CLASS);
          }
        case 92: break;
        case 21: 
          { return createLexeme(PXStylesheetTokenType.COMMA);
          }
        case 93: break;
        case 34: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "in"));
          }
        case 94: break;
        case 46: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "dpx"));
          }
        case 95: break;
        case 69: 
          { return createLexeme(PXStylesheetTokenType.BEFORE_PSEUDO_ELEMENT);
          }
        case 96: break;
        case 36: 
          { return createLexeme(PXStylesheetTokenType.EXS, createDimension(yytext(), "ex"));
          }
        case 97: break;
        case 67: 
          { return createLexeme(PXStylesheetTokenType.ACTIVE_PSEUDO_CLASS);
          }
        case 98: break;
        case 66: 
          { return createLexeme(PXStylesheetTokenType.IMPORT);
          }
        case 99: break;
        case 58: 
          { return createLexeme(PXStylesheetTokenType.LINK_PSEUDO_CLASS);
          }
        case 100: break;
        case 89: 
          { return createLexeme(PXStylesheetTokenType.RADIAL_GRADIENT);
          }
        case 101: break;
        case 19: 
          { return createLexeme(PXStylesheetTokenType.SEMICOLON);
          }
        case 102: break;
        case 33: 
          { return createLexeme(PXStylesheetTokenType.DOUBLE_COLON);
          }
        case 103: break;
        case 28: 
          { return createLexeme(PXStylesheetTokenType.LIST_CONTAINS);
          }
        case 104: break;
        case 64: 
          { return createLexeme(PXStylesheetTokenType.HOVER_PSEUDO_CLASS);
          }
        case 105: break;
        case 32: 
          { return createLexeme(PXStylesheetTokenType.ID);
          }
        case 106: break;
        case 41: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "pc"));
          }
        case 107: break;
        case 15: 
          { return createLexeme(PXStylesheetTokenType.LCURLY);
          }
        case 108: break;
        case 27: 
          { return createLexeme(PXStylesheetTokenType.CONTAINS);
          }
        case 109: break;
        case 25: 
          { return createLexeme(PXStylesheetTokenType.STRING);
          }
        case 110: break;
        case 42: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "px"));
          }
        case 111: break;
        case 63: 
          { return createLexeme(PXStylesheetTokenType.EMPTY_PSEUDO_CLASS);
          }
        case 112: break;
        case 50: 
          { return createLexeme(PXStylesheetTokenType.HSL);
          }
        case 113: break;
        case 37: 
          { return createLexeme(PXStylesheetTokenType.FREQUENCY, createDimension(yytext(), "Hz"));
          }
        case 114: break;
        case 43: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "cm"));
          }
        case 115: break;
        case 60: 
          { return createLexeme(PXStylesheetTokenType.MEDIA);
          }
        case 116: break;
        case 54: 
          { return createLexeme(PXStylesheetTokenType.HSLA);
          }
        case 117: break;
        case 9: 
          { return createLexeme(PXStylesheetTokenType.NTH);
          }
        case 118: break;
        case 57: 
          { return createLexeme(PXStylesheetTokenType.NOT_PSEUDO_CLASS);
          }
        case 119: break;
        case 84: 
          { return createLexeme(PXStylesheetTokenType.ONLY_OF_TYPE_PSEUDO_CLASS);
          }
        case 120: break;
        case 61: 
          { return createLexeme(PXStylesheetTokenType.AFTER_PSEUDO_ELEMENT);
          }
        case 121: break;
        case 85: 
          { return createLexeme(PXStylesheetTokenType.FIRST_LETTER_PSEUDO_ELEMENT);
          }
        case 122: break;
        case 49: 
          { return createLexeme(PXStylesheetTokenType.RGB);
          }
        case 123: break;
        case 11: 
          { return createLexeme(PXStylesheetTokenType.PIPE);
          }
        case 124: break;
        case 26: 
          { return createLexeme(PXStylesheetTokenType.CLASS);
          }
        case 125: break;
        case 45: 
          { return createLexeme(PXStylesheetTokenType.ANGLE, createDimension(yytext(), "deg"));
          }
        case 126: break;
        case 71: 
          { return createLexeme(PXStylesheetTokenType.CHECKED_PSEUDO_CLASS);
          }
        case 127: break;
        case 73: 
          { return createLexeme(PXStylesheetTokenType.NAMESPACE);
          }
        case 128: break;
        case 82: 
          { return createLexeme(PXStylesheetTokenType.NTH_OF_TYPE_PSEUDO_CLASS);
          }
        case 129: break;
        case 6: 
          { return createLexeme(PXStylesheetTokenType.PLUS);
          }
        case 130: break;
        case 87: 
          { return createLexeme(PXStylesheetTokenType.FIRST_OF_TYPE_PSEUDO_CLASS);
          }
        case 131: break;
        case 79: 
          { return createLexeme(PXStylesheetTokenType.ONLY_CHILD_PSEUDO_CLASS);
          }
        case 132: break;
        case 74: 
          { return createLexeme(PXStylesheetTokenType.FONT_FACE);
          }
        case 133: break;
        case 51: 
          { return createLexeme(PXStylesheetTokenType.HSB);
          }
        case 134: break;
        case 76: 
          { return createLexeme(PXStylesheetTokenType.IMPORTANT);
          }
        case 135: break;
        case 65: 
          { return createLexeme(PXStylesheetTokenType.FOCUS_PSEUDO_CLASS);
          }
        case 136: break;
        case 62: 
          { return createLexeme(PXStylesheetTokenType.LANG_PSEUDO_CLASS);
          }
        case 137: break;
        case 48: 
          { return createLexeme(PXStylesheetTokenType.FREQUENCY, createDimension(yytext(), "kHz"));
          }
        case 138: break;
        case 56: 
          { return createURLLexeme();
          }
        case 139: break;
        case 77: 
          { return createLexeme(PXStylesheetTokenType.NTH_CHILD_PSEUDO_CLASS);
          }
        case 140: break;
        case 35: 
          { return createLexeme(PXStylesheetTokenType.EMS, createDimension(yytext(), "em"));
          }
        case 141: break;
        case 29: 
          { return createLexeme(PXStylesheetTokenType.EQUALS_WITH_HYPHEN);
          }
        case 142: break;
        case 81: 
          { return createLexeme(PXStylesheetTokenType.FIRST_CHILD_PSEUDO_CLASS);
          }
        case 143: break;
        case 44: 
          { return createLexeme(PXStylesheetTokenType.AND);
          }
        case 144: break;
        case 23: 
          { return createLexeme(PXStylesheetTokenType.TIME, createDimension(yytext(), "s"));
          }
        case 145: break;
        case 22: 
          { return createLexeme(PXStylesheetTokenType.DIMENSION);
          }
        case 146: break;
        case 2: 
          { return createLexeme(PXStylesheetTokenType.NUMBER);
          }
        case 147: break;
        case 75: 
          { return createLexeme(PXStylesheetTokenType.KEYFRAMES);
          }
        case 148: break;
        case 13: 
          { return createLexeme(PXStylesheetTokenType.RPAREN);
          }
        case 149: break;
        case 83: 
          { return createLexeme(PXStylesheetTokenType.LAST_OF_TYPE_PSEUDO_CLASS);
          }
        case 150: break;
        case 38: 
          { return createLexeme(PXStylesheetTokenType.TIME, createDimension(yytext(), "ms"));
          }
        case 151: break;
        case 17: 
          { return createLexeme(PXStylesheetTokenType.LBRACKET);
          }
        case 152: break;
        case 72: 
          { return createLexeme(PXStylesheetTokenType.VISITED_PSEUDO_CLASS);
          }
        case 153: break;
        case 78: 
          { return createLexeme(PXStylesheetTokenType.LAST_CHILD_PSEUDO_CLASS);
          }
        case 154: break;
        case 1: 
          { return createLexeme(PXStylesheetTokenType.ERROR);
          }
        case 155: break;
        case 3: 
          { return createLexeme(PXStylesheetTokenType.IDENTIFIER);
          }
        case 156: break;
        case 59: 
          { return createLexeme(PXStylesheetTokenType.ROOT_PSEUDO_CLASS);
          }
        case 157: break;
        case 80: 
          { return createLexeme(PXStylesheetTokenType.FIRST_LINE_PSEUDO_ELEMENT);
          }
        case 158: break;
        case 39: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "mm"));
          }
        case 159: break;
        case 68: 
          { return createLexeme(PXStylesheetTokenType.TARGET_PSEUDO_CLASS);
          }
        case 160: break;
        case 53: 
          { return createLexeme(PXStylesheetTokenType.RGBA);
          }
        case 161: break;
        case 14: 
          { return createLexeme(PXStylesheetTokenType.COLON);
          }
        case 162: break;
        case 5: 
          { /* ignore */
          }
        case 163: break;
        case 47: 
          { return createLexeme(PXStylesheetTokenType.ANGLE, createDimension(yytext(), "rad"));
          }
        case 164: break;
        case 10: 
          { return createLexeme(PXStylesheetTokenType.TILDE);
          }
        case 165: break;
        case 86: 
          { return createLexeme(PXStylesheetTokenType.INDETERMINATE_PSEUDO_CLASS);
          }
        case 166: break;
        case 4: 
          { return createLexeme(PXStylesheetTokenType.EQUAL);
          }
        case 167: break;
        case 88: 
          { return createLexeme(PXStylesheetTokenType.LINEAR_GRADIENT);
          }
        case 168: break;
        case 20: 
          { return createLexeme(PXStylesheetTokenType.GREATER_THAN);
          }
        case 169: break;
        case 12: 
          { return createLexeme(PXStylesheetTokenType.LPAREN);
          }
        case 170: break;
        case 31: 
          { return createLexeme(PXStylesheetTokenType.ENDS_WITH);
          }
        case 171: break;
        case 52: 
          { return createLexeme(PXStylesheetTokenType.ANGLE, createDimension(yytext(), "grad"));
          }
        case 172: break;
        case 70: 
          { return createLexeme(PXStylesheetTokenType.ENABLED_PSEUDO_CLASS);
          }
        case 173: break;
        case 7: 
          { return createLexeme(PXStylesheetTokenType.SLASH);
          }
        case 174: break;
        case 18: 
          { return createLexeme(PXStylesheetTokenType.RBRACKET);
          }
        case 175: break;
        case 16: 
          { return createLexeme(PXStylesheetTokenType.RCURLY);
          }
        case 176: break;
        case 8: 
          { return createLexeme(PXStylesheetTokenType.STAR);
          }
        case 177: break;
        case 40: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "pt"));
          }
        case 178: break;
        case 30: 
          { return createLexeme(PXStylesheetTokenType.STARTS_WITH);
          }
        case 179: break;
        case 24: 
          { return createLexeme(PXStylesheetTokenType.PERCENTAGE, createDimension(yytext(), "%"));
          }
        case 180: break;
        case 91: 
          { return createLexeme(PXStylesheetTokenType.NTH_LAST_OF_TYPE_PSEUDO_CLASS);
          }
        case 181: break;
        case 55: 
          { return createLexeme(PXStylesheetTokenType.HSBA);
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new PXStylesheetLexeme(PXStylesheetTokenType.EOF, yychar, 0, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
